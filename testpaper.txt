dijkstra's algorithm

- create path and heap strucutre

start while loop
    - insert start to heap with priority 0, meaning it should be removed first
        - if we put the weight as the priority, when it gets removed, the vertex with the lowest weight will always be removed first
    - insert start to the path
    - for loop, iterating through the current vertex's adjacent nodes
        - the issue is that it will start to traverse the vertex with the shortest weight
    - insert every adj vertex to heap

----

def dijkstra(self, start, end):
        start = self.getVertex(start)
        end = self.getVertex(end)

        return self.dijkstraAlgorithm(start, end)

    def dijkstraAlgorithm(self, start, end):
        self.unvisitAll()
        path = ll.DSALinkedList()
        heap = DSAHeap.DSAHeap(self.linkCount)
        heap.insert(0, start)

        while heap.isEmpty() is False:
            weight, current = heap.remove()
            current.visit()
            path.insertLast((current, weight)) 
            if current == end:
                return path
            else: #where the issue starts
                for vertex, weight in current.getLinks(): 
                    if vertex == end:
                        path.insertLast((vertex, weight)) 
                        return path
                    if vertex.isVisited() is False:
                        heap.insert(weight, vertex)
        else:
            raise ValueError("No path found") 